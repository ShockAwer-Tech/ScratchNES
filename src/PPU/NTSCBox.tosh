; "240x224 framebuffer"
; "Uses smart double buffering with a poking rendering method"
; "Designed for use with ScratchNES"

define-atomic evaluate pixel x: (mX) y: (mY)

define-atomic evaluate sprites scanline: (N)
delete all of secondary OAM
delete all of evaluation line
repeat 32
	add "255" to secondary OAM
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
end
set evaluation n to 1
set evaluation slot to 1
repeat 64
	if evaluation slot < 32 then
		if item evaluation n of OAM > N and item evaluation n of OAM - 8 < N then
			replace item evaluation slot + 1 of secondary OAM with item (evaluation n + 1) of OAM
			replace item evaluation slot + 2 of secondary OAM with item (evaluation n + 2) of OAM
			set temp to item (evaluation n + 3) of OAM
			replace item evaluation slot + 3 of secondary OAM with temp
			change evaluation slot by 4
			replace item temp of evaluation line with evaluation n
			replace item temp+1 of evaluation line with evaluation n
			replace item temp+2 of evaluation line with evaluation n
			replace item temp+3 of evaluation line with evaluation n
			replace item temp+4 of evaluation line with evaluation n
			replace item temp+5 of evaluation line with evaluation n
			replace item temp+6 of evaluation line with evaluation n
			replace item temp+7 of evaluation line with evaluation n
		end
		change evaluation n by 4
	end
end
; "TODO: evaluate sprites in secondary OAM"
; "TODO: buggy sprite overflow flag"

define-atomic fast phosphorus paint
go to x: -128 y: 128
set I to 1
set Y to -1
pen down
repeat 224
	delete all of scanline
	change Y by 1
	evaluate sprites scanline:  (Y)
	set X to 0
	set flag to 0
	repeat 240
		set color to <not item X of evaluation line = -1> * 16000000
		add color to scanline
		change X by 1
		change flag by <item I of view = color>
		change I by 1
	end
	if not flag = 240 then
		set x to -128
		change I by -240
		set X to 1
		repeat 120
			set color to item X of scanline
			set color2 to item (X + 1) of scanline
			replace item I of view with color
			replace item I + 1 of view with color2
			change I by 2
			change X by 2
			set pen color to ((color + color2) * 0.5)
			change x by 2
		end
	end
	change y by -1
end
pen up

when flag clicked
initialize framebuffer
initialize OAM
hide
reset timer
set count to 0
show variable q
forever
	replace item 1 of OAM with floor of (64 + 48 * sin of (20 * count))
	replace item 4 of OAM with floor of (84 + 64 * cos of (10 * count))
	replace item 5 of OAM with floor of (87 + 16 * sin of (10 * count))
	replace item 8 of OAM with floor of (91 + 80 * cos of (20 * count))
	replace item 9 of OAM with floor of (170 + 32 * sin of (15 * count))
	replace item 12 of OAM with floor of (90 + 90 * cos of (20 * count))
	replace item 13 of OAM with floor of (120 + 32 * sin of (30 * count))
	replace item 1+16 of OAM with floor of (64 + 48 * sin of (20 * count))
	replace item 4+16 of OAM with floor of (84 + 64 * cos of (10 * count)) + 8
	replace item 5+16 of OAM with floor of (87 + 16 * sin of (10 * count))
	replace item 8+16 of OAM with floor of (91 + 80 * cos of (20 * count)) + 8
	replace item 9+16 of OAM with floor of (170 + 32 * sin of (15 * count)) 
	replace item 12+16 of OAM with floor of (90 + 90 * cos of (20 * count)) + 8
	replace item 13+16 of OAM with floor of (120 + 32 * sin of (30 * count))
	replace item 16+16 of OAM with floor of (91 + 80 * sin of (10 * count)) + 8
	fast phosphorus paint
	change count by 1
	set q to timer / count
end

define initialize framebuffer
delete all of view
repeat 240 * 224
	add "-1" to view
end
pen up
clear
set pen size to 1

define initialize OAM
delete all of OAM
repeat 256
	add "0" to OAM
end

define ; [comment]
