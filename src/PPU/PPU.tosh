define-atomic evaluate sprites scanline: (N)
delete all of secondary OAM
delete all of evaluation line
repeat 32
	add "255" to secondary OAM
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
	add "-1" to evaluation line
end
set evaluation n to 1
set evaluation slot to 1
repeat 64
	if evaluation slot < 32 and not N < item evaluation n of OAM and item evaluation n of OAM + 8 > N then
		replace item evaluation slot of secondary OAM with item evaluation n of OAM
		replace item evaluation slot + 1 of secondary OAM with item (evaluation n + 1) of OAM
		replace item evaluation slot + 2 of secondary OAM with item (evaluation n + 2) of OAM
		set temp to item (evaluation n + 3) of OAM
		replace item evaluation slot + 3 of secondary OAM with temp
		replace item temp of evaluation line with evaluation slot
		replace item temp + 1 of evaluation line with evaluation slot
		replace item temp + 2 of evaluation line with evaluation slot
		replace item temp + 3 of evaluation line with evaluation slot
		replace item temp + 4 of evaluation line with evaluation slot
		replace item temp + 5 of evaluation line with evaluation slot
		replace item temp + 6 of evaluation line with evaluation slot
		replace item temp + 7 of evaluation line with evaluation slot
		change evaluation slot by 4
	end
	change evaluation n by 4
end
; "TODO: evaluate sprites in secondary OAM"
; "TODO: buggy sprite overflow flag"

define-atomic get pattern tile: (tile) scanline: (scanline) table: (table)
set lower mask to item (1 + (join "0x" (item (16 * tile + scanline + table + 1) of CHR-ROM))) of bitmask
set mask to item (1 + (join "0x" (item (16 * tile + scanline + table + 9) of CHR-ROM))) of bitmask

define-atomic compute background pixel
set offset to 1 + mX mod 8
set tmp to 2 * letter offset of BG: Plane 1 + letter offset of BG: Plane 0
if tmp = 0 then
	set tmp to item 1 of Palette
else
	set tmp to item 1+(4*BG: Palette)+tmp of Palette
end

define-atomic compute pixel
if mX mod 8 = 0 then
	set PPU VRAM address to 8192 + mX / 8 + 32 * floor of (mY / 8)
	read PPU memory
	set BG: Plane 0 to item (1 + (join "0x" (item (16 * M + PPU Background pattern table + mY mod 8 + 1) of CHR-ROM))) of bitmask
	set BG: Plane 1 to item (1 + (join "0x" (item (16 * M + PPU Background pattern table + mY mod 8 + 9) of CHR-ROM))) of bitmask
	set PPU VRAM address to 9152 + floor of (mX / 16) + (16*floor of (mY / 16))
	read PPU memory
	set mask to item 1 + M of bitmask
	set offset to 2*<mX mod 16 > 7> + 4*<mY mod 16 > 7>
	set BG: Palette to (2*letter offset + 1 of mask) + letter offset + 2 of mask
end
if item mX of evaluation line = -1 then
	compute background pixel
else
	get pattern tile:  (item (item mX of evaluation line + 1) of secondary OAM) scanline:  (mY - item item mX of evaluation line of secondary OAM) table:  (PPU Sprite pattern table)
	set offset to mX - item (item mX of evaluation line + 3) of secondary OAM
	set tmp to 2 * letter (offset + 1) of lower mask + letter (offset + 1) of mask
	if tmp = 0 then
		compute background pixel
	else
		set tmp to item (17 + tmp) of Palette
	end
end

define-atomic emulate frame
go to x: -128 y: 128
set mY to -1
repeat 224
	change mY by 1
	evaluate sprites scanline:  (mY)
	go to x: -128 y: y position - 1
	pen down
	set mX to 0
	repeat until mX > 254
		step CPU
		if PPU show bg = 1 or PPU show sprites = 1 then
			repeat cycles
				compute pixel
				set pen color to (tmp)
				change mX by 1
				change x by 1
				compute pixel
				set pen color to (tmp)
				change x by 1
				change mX by 1
				compute pixel
				set pen color to (tmp)
				change x by 1
				change mX by 1
			end
		else
			change mX by 3 * cycles
		end
		set cycles to 0
	end
	pen up
end
set PPU vblank?1 to 1
if PPU generate NMI = 1 then
	interrupt: vector "0xFFFA"
end
repeat until cycles > 2380
	step CPU
end
set cycles to 0

define-atomic initialize PPU
pen up
clear
set pen size to 1
delete all of OAM
repeat 256
	add "0" to OAM
end
delete all of Nametables
repeat 2048
	add "0" to Nametables
end
delete all of Palette
repeat 1 + 4 * 4 + 4 * 4
	add "0" to Palette
end
hide

define-atomic read PPU register (N)
if N = 2 then
	set M to 128 * PPU vblank?1 + 64 * PPU sprite 0?1 + 32 * PPU sprite overflow?1
	set PPU address latch to 0
	set PPU vblank?1 to 0
else
	if N = 7 then
		read PPU memory
	end
end

; "TODO: use O(logN) lookup instead of O(N)"

define-atomic write PPU register (N) value: (V)
if N = 0 then
	set mask to item (1 + V) of bitmask
	set PPU base nametable address to 2 * letter 7 of mask + letter 8 of mask
	set PPU VRAM increment to letter 6 of mask * 31 + 1
	set PPU Sprite pattern table to letter 5 of mask * 4096
	set PPU Background pattern table to letter 4 of mask * 4096
	set PPU Sprite size to letter 3 of mask
	set PPU master slave select to letter 2 of mask
	set PPU generate NMI to letter 1 of mask
else
	if N = 1 then
		set mask to item (1 + V) of bitmask
		set PPU grayscale to letter 8 of mask
		set PPU show left8 bg to letter 7 of mask
		set PPU show left8 sprites to letter 6 of mask
		set PPU show bg to letter 5 of mask
		set PPU show sprites to letter 4 of mask
		set PPU emphasize blue to letter 3 of mask
		set PPU emphasize green to letter 2 of mask
		set PPU emphasize red to letter 1 of mask
	else
		if N = 3 then
			set PPU OAMADDR to V
		else
			if N = 4 then
				replace item PPU OAMADDR mod 256 + 1 of OAM with V
				change PPU OAMADDR by 1
			else
				if N = 5 then
					if PPU address latch = 0 then
						set PPU fine x scroll to V
					else
						set PPU fine y scroll to V
					end
				else
					if N = 6 then
						if PPU address latch = 0 then
							; "TODO: is this correct?"
							set PPU VRAM address to V * 256
							set PPU address latch to 1
						else
							change PPU VRAM address by V
							set PPU address latch to 0
						end
					else
						if N = 7 then
							write PPU memory (V)
							change PPU VRAM address by 1
						end
					end
				end
			end
		end
	end
end

define-atomic OAM DMA (pagebase)
set temp to 0
repeat 256
	mapper read (256 * pagebase + PPU OAMADDR + temp)
	change temp by 1
	replace item temp of OAM with M
end

define-atomic read PPU memory
if PPU VRAM address < 32 * 256 then
	set M to item (1 + PPU VRAM address) of CHR-ROM
else
	if PPU VRAM address < 48 * 256 then
		set M to item (PPU VRAM address - 8191) of Nametables
	else
		if PPU VRAM address < 63 * 256 then
			set M to item (PPU VRAM address - 12287) of Nametables
		else
			if PPU VRAM address < 64 * 256 then
				set M to item (PPU VRAM address mod 32 + 1) of Palette
			else
				; "TODO: PPU memory mirroring"
			end
		end
	end
end

define-atomic write PPU memory (V)
if PPU VRAM address < 32 * 256 then
	replace item 1 + PPU VRAM address of CHR-ROM with V
else
	if PPU VRAM address < 48 * 256 then
		replace item PPU VRAM address - 8191 of Nametables with V
	else
		if PPU VRAM address < 63 * 256 then
			replace item PPU VRAM address - 12287 of Nametables with V
		else
			if PPU VRAM address < 64 * 256 then
				replace item (PPU VRAM address mod 32) + 1 of Palette with item (V+1) of RGB
			else
				; "TODO: PPU memory mirroring"
			end
		end
	end
end