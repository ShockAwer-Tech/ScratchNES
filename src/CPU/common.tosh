define ; [comment]

define mapper read (addr)
if addr < 8192 then
	set M to item (addr mod 2048 + 1) of RAM
else
	if addr > 32767 then
		set M to (join "0x" (item ((addr - 32768) mod 16384 + 1) of PRG-ROM))
	end
end

define mapper write (addr) (value)
if addr < 8192 then
	replace item addr mod 2048 + 1 of RAM with value
else
	if addr > 8191 and addr < 8200 then
		ask join join (value) " to PPU " (addr) and wait
	else
		if addr > 32768 then
			say "Writing to ROM isn't very nice, you know..."
		end
	end
end

define PLP
set flagN to < (item (join (letter 1 of M) "8")+1 of AND) = 8>
set flagV to < (item (join (letter 1 of M) "4")+1 of AND) = 4>
set flagB to < (item (join (letter 1 of M) "1")+1 of AND) = 1>
set flagD to < (item (join (letter 2 of M) "8")+1 of AND) = 8>
set flagI to < (item (join (letter 2 of M) "4")+1 of AND) = 4>
set flagZ to < (item (join (letter 2 of M) "2")+1 of AND) = 2>
set flagC to < (item (join (letter 2 of M) "1")+1 of AND) = 1>

define interrupt: vector [vector]
mapper write 256 + S (PC - (PC mod 256))
set S to (S - 1) mod 256
mapper write 256 + S (PC mod 256)
set S to (S - 1) mod 256
compute SR
mapper write 256 + S SR
set S to (S - 1) mod 256
set flagI to 1
mapper read vector
set tmp to M
mapper read vector+1
set PC to (M*256) + tmp

define compute SR
set SR to (128*flagN) + (64*flagV) + (32) + (16*flagB) + (8*flagD) + (4*flagI) + (2*flagZ) + (1*flagC)

when flag clicked
set A to 0
set X to 0
set Y to 0
set S to "0xFD"
set PC to 49152
show variable A
show variable X
show variable Y
show variable PC
show variable M
show variable flagC
show variable flagV
show variable flagN
show variable flagZ
show variable flagI
show variable flagB
show variable flagD
show variable S
set line to 0
show variable line
delete all of RAM
repeat 2048
	add "0" to RAM
end

when p key pressed
mapper read (PC)
interpret instruction (M)
change line by 1

define interpret instruction (opcode)
